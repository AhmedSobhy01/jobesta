CREATE TYPE "account_role" AS ENUM (
  'admin',
  'freelancer',
  'client'
);

CREATE TYPE "job_status" AS ENUM (
  'pending',
  'open',
  'in_progress',
  'completed',
  'closed'
);

CREATE TYPE "proposal_status" AS ENUM (
  'pending',
  'accepted',
  'rejected'
);

CREATE TYPE "milestone_status" AS ENUM (
  'pending',
  'completed'
);

CREATE TYPE "payment_status" AS ENUM (
  'pending',
  'completed',
  'failed'
);

CREATE TYPE "notification_type" AS ENUM (
  'proposal_submitted',
  'proposal_accepted',
  'proposal_rejected',
  'milestone_completed',
  'payment_received',
  'message_received',
  'review_received',
  'badge_earned',
  'withdrawal_processed'
);

CREATE TYPE "withdrawal_status" AS ENUM (
  'pending',
  'completed'
);

CREATE TYPE "withdrawal_payment_method" AS ENUM (
  'bank_transfer',
  'paypal',
  'ewallet'
);

CREATE TABLE "accounts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "first_name" VARCHAR(255) NOT NULL,
  "last_name" VARCHAR(255) NOT NULL,
  "username" VARCHAR(255) UNIQUE NOT NULL,
  "email" VARCHAR(255) UNIQUE NOT NULL,
  "password" VARCHAR(255) NOT NULL,
  "profile_picture" VARCHAR(255),
  "is_banned" BOOLEAN NOT NULL DEFAULT false,
  "role" account_role NOT NULL,
  "created_at" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "freelancers" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "bio" VARCHAR(1023),
  "balance" DECIMAL(16,2) NOT NULL DEFAULT 0,
  "account_id" INTEGER NOT NULL
);

CREATE TABLE "skills" (
  "freelancer_id" INTEGER,
  "name" VARCHAR(255),
  PRIMARY KEY ("freelancer_id", "name")
);

CREATE TABLE "previous_works" (
  "freelancer_id" INTEGER,
  "order" INTEGER,
  "title" VARCHAR(255) NOT NULL,
  "description" VARCHAR(1000) NOT NULL,
  "url" VARCHAR(255),
  PRIMARY KEY ("freelancer_id", "order")
);

CREATE TABLE "jobs" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "status" job_status NOT NULL DEFAULT 'pending',
  "budget" DECIMAL(16,2) NOT NULL,
  "duration" INTEGER NOT NULL,
  "title" VARCHAR(255) NOT NULL,
  "description" TEXT NOT NULL,
  "category_id" INTEGER,
  "client_id" INTEGER NOT NULL,
  "created_at" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "proposals" (
  "job_id" INTEGER,
  "freelancer_id" INTEGER,
  "status" proposal_status NOT NULL DEFAULT 'pending',
  "cover_letter" TEXT NOT NULL,
  "created_at" TIMESTAMP NOT NULL DEFAULT (now()),
  PRIMARY KEY ("job_id", "freelancer_id")
);

CREATE TABLE "milestones" (
  "job_id" INTEGER,
  "freelancer_id" INTEGER,
  "order" INTEGER,
  "status" milestone_status NOT NULL DEFAULT 'pending',
  "name" VARCHAR(255) NOT NULL,
  "duration" INTEGER NOT NULL,
  "amount" DECIMAL(16,2) NOT NULL,
  PRIMARY KEY ("job_id", "freelancer_id", "order")
);

CREATE TABLE "payments" (
  "status" payment_status NOT NULL DEFAULT 'pending',
  "job_id" INTEGER NOT NULL,
  "freelancer_id" INTEGER NOT NULL,
  "milestone_order" INTEGER NOT NULL,
  "client_id" INTEGER NOT NULL,
  "stripe_id" VARCHAR(255),
  "created_at" TIMESTAMP NOT NULL DEFAULT (now()),
  PRIMARY KEY ("job_id", "freelancer_id", "milestone_order")
);

CREATE TABLE "badges" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(255) NOT NULL,
  "description" VARCHAR(255) NOT NULL,
  "icon" VARCHAR(255) NOT NULL
);

CREATE TABLE "categories" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(255) NOT NULL,
  "description" VARCHAR(255) NOT NULL
);

CREATE TABLE "notifications" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "type" notification_type NOT NULL,
  "message" VARCHAR(255) NOT NULL,
  "url" VARCHAR(255) NOT NULL,
  "is_read" BOOLEAN NOT NULL DEFAULT false,
  "account_id" INTEGER NOT NULL,
  "created_at" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "withdrawals" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "status" withdrawal_status NOT NULL DEFAULT 'pending',
  "amount" DECIMAL(16,2) NOT NULL,
  "payment_method" withdrawal_payment_method NOT NULL,
  "payment_username" VARCHAR(255) NOT NULL,
  "requested_at" TIMESTAMP NOT NULL DEFAULT (now()),
  "freelancer_id" INTEGER NOT NULL
);

CREATE TABLE "reviews" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "rating" INTEGER NOT NULL,
  "comment" VARCHAR(255),
  "job_id" INTEGER NOT NULL,
  "freelancer_id" INTEGER NOT NULL,
  "account_id" INTEGER NOT NULL,
  "created_at" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "messages" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "message" TEXT NOT NULL,
  "attachment_path" VARCHAR(255),
  "job_id" INTEGER NOT NULL,
  "freelancer_id" INTEGER NOT NULL,
  "account_id" INTEGER NOT NULL,
  "sent_at" TIMESTAMP NOT NULL DEFAULT (now())
);

CREATE TABLE "badge_freelancer" (
  "badge_id" INTEGER,
  "freelancer_id" INTEGER,
  "earned_at" TIMESTAMP NOT NULL DEFAULT (now()),
  PRIMARY KEY ("badge_id", "freelancer_id")
);

ALTER TABLE "badge_freelancer" ADD FOREIGN KEY ("badge_id") REFERENCES "badges" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "badge_freelancer" ADD FOREIGN KEY ("freelancer_id") REFERENCES "freelancers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "skills" ADD FOREIGN KEY ("freelancer_id") REFERENCES "freelancers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "previous_works" ADD FOREIGN KEY ("freelancer_id") REFERENCES "freelancers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "notifications" ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "freelancers" ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "proposals" ADD FOREIGN KEY ("job_id") REFERENCES "jobs" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "proposals" ADD FOREIGN KEY ("freelancer_id") REFERENCES "freelancers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "reviews" ADD FOREIGN KEY ("job_id", "freelancer_id") REFERENCES "proposals" ("job_id", "freelancer_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "reviews" ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "messages" ADD FOREIGN KEY ("job_id", "freelancer_id") REFERENCES "proposals" ("job_id", "freelancer_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "messages" ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "milestones" ADD FOREIGN KEY ("job_id", "freelancer_id") REFERENCES "proposals" ("job_id", "freelancer_id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "payments" ADD FOREIGN KEY ("job_id", "freelancer_id", "milestone_order") REFERENCES "milestones" ("job_id", "freelancer_id", "order") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "payments" ADD FOREIGN KEY ("client_id") REFERENCES "accounts" ("id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "withdrawals" ADD FOREIGN KEY ("freelancer_id") REFERENCES "freelancers" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "jobs" ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE;

ALTER TABLE "jobs" ADD FOREIGN KEY ("client_id") REFERENCES "accounts" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

INSERT INTO
    "accounts" (
        "first_name",
        "last_name",
        "username",
        "email",
        "password",
        "role"
    )
VALUES (
        'admin',
        '1',
        'admin',
        'admin@example.com',
        '$2b$10$PULvnFnlNpW1oaWcaRA1mefM1QhCuaOMCCw81GtUeJhvUV/stomfu',
        'admin'
    );

INSERT INTO
    "categories" ("name", "description")
VALUES (
        'Web Development',
        'Building and maintaining websites and web applications'
    ),
    (
        'Mobile Development',
        'Creating applications for mobile devices'
    ),
    (
        'Game Development',
        'Designing and developing video games'
    ),
    (
        'Data Science',
        'Analyzing and interpreting complex data'
    ),
    (
        'Machine Learning',
        'Developing algorithms that allow computers to learn from data'
    ),
    (
        'Artificial Intelligence',
        'Creating intelligent agents and systems'
    ),
    (
        'Cybersecurity',
        'Protecting systems and networks from digital attacks'
    ),
    (
        'Blockchain',
        'Developing decentralized applications using blockchain technology'
    ),
    (
        'DevOps',
        'Combining software development and IT operations'
    ),
    (
        'Cloud Computing',
        'Delivering computing services over the internet'
    );

INSERT INTO "badges" ("id", "name", "description", "icon")
VALUES (1, 'Getting Started','Completed your first job','uploads/getting-started.png'),
       (2, 'Top Rated','Received a 5-star rating on 5 jobs','uploads/top-rated.png'),
        (3, 'Pro','Completed 10 jobs','uploads/pro.png');

-- Add a trigger to award the Getting Started badge to a freelancer when they complete their first job
CREATE OR REPLACE FUNCTION award_getting_started_badge()
RETURNS TRIGGER AS $$
DECLARE
    completed_jobs_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO completed_jobs_count
    FROM proposals 
    JOIN jobs ON proposals.job_id = jobs.id AND jobs.status = 'completed'
    WHERE freelancer_id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted') AND proposals.status = 'accepted';

    IF completed_jobs_count = 1 THEN
        INSERT INTO badge_freelancer (badge_id, freelancer_id)
        SELECT id, (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')
        FROM badges
        WHERE id = 1
        ON CONFLICT DO NOTHING;

        INSERT INTO notifications (type, message, account_id, url)
        SELECT 'badge_earned',
        'You have earned the Getting Started badge!',
        (SELECT account_id FROM freelancers WHERE id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')),
        (SELECT CONCAT('/users/', username) FROM accounts WHERE id = (SELECT account_id FROM freelancers WHERE id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')));
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_getting_started_badge
AFTER UPDATE ON jobs
FOR EACH ROW
WHEN (OLD.status IS DISTINCT FROM NEW.status AND NEW.status = 'completed')
EXECUTE FUNCTION award_getting_started_badge();

-- Add a trigger to award the Top Rated badge to a freelancer when they receive a 5-star rating on 5 jobs
CREATE OR REPLACE FUNCTION award_top_rated_badge()
RETURNS TRIGGER AS $$
DECLARE
    five_star_jobs INTEGER;
BEGIN
    SELECT COUNT(*) INTO five_star_jobs
    FROM reviews
    WHERE freelancer_id = NEW.freelancer_id AND rating = 5.0 AND account_id != (SELECT account_id FROM freelancers WHERE id = NEW.freelancer_id);

    IF five_star_jobs = 5 THEN
        INSERT INTO badge_freelancer (badge_id, freelancer_id)
        SELECT id, NEW.freelancer_id
        FROM badges
        WHERE id = 2
        ON CONFLICT DO NOTHING;

        INSERT INTO notifications (type, message, account_id, url)
        SELECT 'badge_earned',
        'You have earned the Top Rated badge!',
        (SELECT account_id FROM freelancers WHERE id = NEW.freelancer_id),
        (SELECT CONCAT('/users/', username) FROM accounts WHERE id = (SELECT account_id FROM freelancers WHERE id = NEW.freelancer_id));
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_top_rated_badge
AFTER INSERT ON reviews
FOR EACH ROW
EXECUTE FUNCTION award_top_rated_badge();

-- Add a trigger to award the Pro badge to a freelancer when they complete 10 jobs
CREATE OR REPLACE FUNCTION award_pro_badge()
RETURNS TRIGGER AS $$
DECLARE
    completed_jobs_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO completed_jobs_count
    FROM proposals 
    JOIN jobs ON proposals.job_id = jobs.id AND jobs.status = 'completed'
    WHERE freelancer_id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted') AND proposals.status = 'accepted';

    IF completed_jobs_count = 10 THEN
        INSERT INTO badge_freelancer (badge_id, freelancer_id)
        SELECT id, (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')
        FROM badges
        WHERE id = 3
        ON CONFLICT DO NOTHING;

        INSERT INTO notifications (type, message, account_id, url)
        SELECT 'badge_earned',
        'You have earned the Pro badge!',
        (SELECT account_id FROM freelancers WHERE id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')),
        (SELECT CONCAT('/users/', username) FROM accounts WHERE id = (SELECT account_id FROM freelancers WHERE id = (SELECT freelancer_id FROM proposals WHERE job_id = NEW.id AND status = 'accepted')));
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_pro_badge
AFTER UPDATE ON jobs
FOR EACH ROW
WHEN (OLD.status IS DISTINCT FROM NEW.status AND NEW.status = 'completed')
EXECUTE FUNCTION award_pro_badge();